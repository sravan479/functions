
Promise:
 A promise is a special javascript object that represents the eventual completion(or failure) of an asynchronous operation


three states:
Pending:The initial state ,the promise is still waiting for the operation to finish
Fulfilled: the operation completed successfully
Rejected:the operation failed
Exp:
To create a promise new promise
The promise constructor takes a function with two parameters:
Resolve: to make as the promise is successful
Reject: to mark it as failed

Handling:
.then() method is called when the promise is fulfilled;
It receive the result from the resolve();
.catch() method is called when promise is rejected;
It receive the result from the reject();
Example:
let myPromise= new Promise((resolve ,reject) =>{
  let success = true
  if(success){
    resolve("The operation was successfully")
  }else{
    reject("The operation failed")
  }

});
myPromise
.then(result=>{
  console.log(result)
})
.catch(error =>{
  console.log(error)
})

Output:
The operation was successfully

let promise=new Promise((reslove,reject)=>{
            reslove(5)
           });
           promise
            .then(result=>{
               document.write(result,"<br>")
               return result*2
            })
            .then(result=>{
               document.write(result,"<br>")
               return result+3
            })
            .catch(error=>{
               document.write(error)
            })


Output:
5
10
1)	Promise with set TimeOut
---Using setTimeout the promise will resolve after certain amount of time 3

 let promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(10);
    }, 2000); // Delay of 2 seconds
});

promise
    .then(result => {
        document.write(result, "<br>");
        return result * 3;
    })
    .then(result => {
        document.write(result, "<br>");
        return result + 5;
    })
    .catch(error => {
        document.write(error);
    });

Output:
10
30


/*let myPromise= new Promise((resolve ,reject) =>{
  let success = true
  if(success){
    resolve("The operation was successfully")
  }else{
    reject("The operation failed")
  }

});
myPromise
.then(result=>{
  console.log(result)
})
.catch(error =>{
  console.log(error)
})*/
/*let promise=new Promise((reslove,reject)=>{
            reslove(5)
           });
           promise
            .then(result=>{
               document.write(result,"<br>")
               return result*2
            })
            .then(result=>{
               document.write(result,"<br>")
               return result+3
            })
            .catch(error=>{
               document.write(error)
            })*/

           /* let promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(5);
    }, 1000); // Delay of 1 second
});

promise
    .then(result => {
        document.write(result, "<br>");
        return result * 2;
    })
    .then(result => {
        document.write(result, "<br>");
        return result + 3;
    })
    .catch(error => {
        document.write(error);
    });*/


    let promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(10);
    }, 2000); // Delay of 2 seconds
});

promise
    .then(result => {
        document.write(result, "<br>");
        return result * 3;
    })
    .then(result => {
        document.write(result, "<br>");
        return result + 5;
    })
    .catch(error => {
        document.write(error);
    });










      



